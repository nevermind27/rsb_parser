// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb_event.proto

#include "rsb_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_rsb_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_Channel_rsb_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsb_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point_Channel_Block_rsb_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsb_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_rsb_5fevent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto;
namespace Rsh {
class Point_Channel_Block_FrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Channel_Block_Frame> _instance;
} _Point_Channel_Block_Frame_default_instance_;
class Point_Channel_Block_EventsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Channel_Block_Events> _instance;
} _Point_Channel_Block_Events_default_instance_;
class Point_Channel_BlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Channel_Block> _instance;
} _Point_Channel_Block_default_instance_;
class Point_ChannelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point_Channel> _instance;
} _Point_Channel_default_instance_;
class PointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Point> _instance;
} _Point_default_instance_;
}  // namespace Rsh
static void InitDefaultsscc_info_Point_rsb_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rsh::_Point_default_instance_;
    new (ptr) ::Rsh::Point();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rsh::Point::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_rsb_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point_rsb_5fevent_2eproto}, {
      &scc_info_Point_Channel_rsb_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Point_Channel_rsb_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rsh::_Point_Channel_default_instance_;
    new (ptr) ::Rsh::Point_Channel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rsh::Point_Channel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Point_Channel_rsb_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Point_Channel_rsb_5fevent_2eproto}, {
      &scc_info_Point_Channel_Block_rsb_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Point_Channel_Block_rsb_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rsh::_Point_Channel_Block_default_instance_;
    new (ptr) ::Rsh::Point_Channel_Block();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rsh::Point_Channel_Block::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Point_Channel_Block_rsb_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Point_Channel_Block_rsb_5fevent_2eproto}, {
      &scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto.base,
      &scc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto.base,}};

static void InitDefaultsscc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rsh::_Point_Channel_Block_Events_default_instance_;
    new (ptr) ::Rsh::Point_Channel_Block_Events();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rsh::Point_Channel_Block_Events::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto}, {}};

static void InitDefaultsscc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Rsh::_Point_Channel_Block_Frame_default_instance_;
    new (ptr) ::Rsh::Point_Channel_Block_Frame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Rsh::Point_Channel_Block_Frame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_rsb_5fevent_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_rsb_5fevent_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_rsb_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_rsb_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Frame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Frame, time_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Frame, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Events, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Events, times_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block_Events, amplitudes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, time_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, frames_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, events_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, length_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel_Block, bin_size_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel, id_),
  PROTOBUF_FIELD_OFFSET(::Rsh::Point_Channel, blocks_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Rsh::Point, channels_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::Rsh::Point_Channel_Block_Frame)},
  { 7, -1, sizeof(::Rsh::Point_Channel_Block_Events)},
  { 14, -1, sizeof(::Rsh::Point_Channel_Block)},
  { 24, -1, sizeof(::Rsh::Point_Channel)},
  { 31, -1, sizeof(::Rsh::Point)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rsh::_Point_Channel_Block_Frame_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rsh::_Point_Channel_Block_Events_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rsh::_Point_Channel_Block_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rsh::_Point_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::Rsh::_Point_default_instance_),
};

const char descriptor_table_protodef_rsb_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017rsb_event.proto\022\003Rsh\"\334\002\n\005Point\022$\n\010chan"
  "nels\030\001 \003(\0132\022.Rsh.Point.Channel\032\254\002\n\007Chann"
  "el\022\n\n\002id\030\001 \001(\004\022(\n\006blocks\030\002 \003(\0132\030.Rsh.Poi"
  "nt.Channel.Block\032\352\001\n\005Block\022\014\n\004time\030\001 \001(\004"
  "\022.\n\006frames\030\002 \003(\0132\036.Rsh.Point.Channel.Blo"
  "ck.Frame\022/\n\006events\030\003 \001(\0132\037.Rsh.Point.Cha"
  "nnel.Block.Events\022\016\n\006length\030\004 \001(\004\022\020\n\010bin"
  "_size\030\005 \001(\004\032#\n\005Frame\022\014\n\004time\030\001 \001(\004\022\014\n\004da"
  "ta\030\002 \001(\014\032+\n\006Events\022\r\n\005times\030\001 \003(\004\022\022\n\namp"
  "litudes\030\002 \003(\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_rsb_5fevent_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_rsb_5fevent_2eproto_sccs[5] = {
  &scc_info_Point_rsb_5fevent_2eproto.base,
  &scc_info_Point_Channel_rsb_5fevent_2eproto.base,
  &scc_info_Point_Channel_Block_rsb_5fevent_2eproto.base,
  &scc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto.base,
  &scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_rsb_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rsb_5fevent_2eproto = {
  false, false, descriptor_table_protodef_rsb_5fevent_2eproto, "rsb_event.proto", 381,
  &descriptor_table_rsb_5fevent_2eproto_once, descriptor_table_rsb_5fevent_2eproto_sccs, descriptor_table_rsb_5fevent_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_rsb_5fevent_2eproto::offsets,
  file_level_metadata_rsb_5fevent_2eproto, 5, file_level_enum_descriptors_rsb_5fevent_2eproto, file_level_service_descriptors_rsb_5fevent_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_rsb_5fevent_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_rsb_5fevent_2eproto)), true);
namespace Rsh {

// ===================================================================

void Point_Channel_Block_Frame::InitAsDefaultInstance() {
}
class Point_Channel_Block_Frame::_Internal {
 public:
};

Point_Channel_Block_Frame::Point_Channel_Block_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rsh.Point.Channel.Block.Frame)
}
Point_Channel_Block_Frame::Point_Channel_Block_Frame(const Point_Channel_Block_Frame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_data(),
      GetArena());
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:Rsh.Point.Channel.Block.Frame)
}

void Point_Channel_Block_Frame::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  time_ = PROTOBUF_ULONGLONG(0);
}

Point_Channel_Block_Frame::~Point_Channel_Block_Frame() {
  // @@protoc_insertion_point(destructor:Rsh.Point.Channel.Block.Frame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Channel_Block_Frame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Point_Channel_Block_Frame::ArenaDtor(void* object) {
  Point_Channel_Block_Frame* _this = reinterpret_cast< Point_Channel_Block_Frame* >(object);
  (void)_this;
}
void Point_Channel_Block_Frame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Channel_Block_Frame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Channel_Block_Frame& Point_Channel_Block_Frame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Channel_Block_Frame_rsb_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Point_Channel_Block_Frame::Clear() {
// @@protoc_insertion_point(message_clear_start:Rsh.Point.Channel.Block.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  time_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Channel_Block_Frame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Channel_Block_Frame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rsh.Point.Channel.Block.Frame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rsh.Point.Channel.Block.Frame)
  return target;
}

size_t Point_Channel_Block_Frame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rsh.Point.Channel.Block.Frame)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Channel_Block_Frame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rsh.Point.Channel.Block.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Channel_Block_Frame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Channel_Block_Frame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rsh.Point.Channel.Block.Frame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rsh.Point.Channel.Block.Frame)
    MergeFrom(*source);
  }
}

void Point_Channel_Block_Frame::MergeFrom(const Point_Channel_Block_Frame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rsh.Point.Channel.Block.Frame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {
    _internal_set_data(from._internal_data());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
}

void Point_Channel_Block_Frame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rsh.Point.Channel.Block.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Channel_Block_Frame::CopyFrom(const Point_Channel_Block_Frame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rsh.Point.Channel.Block.Frame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Channel_Block_Frame::IsInitialized() const {
  return true;
}

void Point_Channel_Block_Frame::InternalSwap(Point_Channel_Block_Frame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Channel_Block_Frame::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point_Channel_Block_Events::InitAsDefaultInstance() {
}
class Point_Channel_Block_Events::_Internal {
 public:
};

Point_Channel_Block_Events::Point_Channel_Block_Events(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  times_(arena),
  amplitudes_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rsh.Point.Channel.Block.Events)
}
Point_Channel_Block_Events::Point_Channel_Block_Events(const Point_Channel_Block_Events& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      times_(from.times_),
      amplitudes_(from.amplitudes_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rsh.Point.Channel.Block.Events)
}

void Point_Channel_Block_Events::SharedCtor() {
}

Point_Channel_Block_Events::~Point_Channel_Block_Events() {
  // @@protoc_insertion_point(destructor:Rsh.Point.Channel.Block.Events)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Channel_Block_Events::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point_Channel_Block_Events::ArenaDtor(void* object) {
  Point_Channel_Block_Events* _this = reinterpret_cast< Point_Channel_Block_Events* >(object);
  (void)_this;
}
void Point_Channel_Block_Events::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Channel_Block_Events::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Channel_Block_Events& Point_Channel_Block_Events::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Channel_Block_Events_rsb_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Point_Channel_Block_Events::Clear() {
// @@protoc_insertion_point(message_clear_start:Rsh.Point.Channel.Block.Events)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  times_.Clear();
  amplitudes_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Channel_Block_Events::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint64 times = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_times(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          _internal_add_times(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 amplitudes = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_amplitudes(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          _internal_add_amplitudes(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Channel_Block_Events::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rsh.Point.Channel.Block.Events)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 times = 1;
  {
    int byte_size = _times_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_times(), byte_size, target);
    }
  }

  // repeated uint64 amplitudes = 2;
  {
    int byte_size = _amplitudes_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          2, _internal_amplitudes(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rsh.Point.Channel.Block.Events)
  return target;
}

size_t Point_Channel_Block_Events::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rsh.Point.Channel.Block.Events)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 times = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->times_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _times_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 amplitudes = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->amplitudes_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _amplitudes_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Channel_Block_Events::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rsh.Point.Channel.Block.Events)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Channel_Block_Events* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Channel_Block_Events>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rsh.Point.Channel.Block.Events)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rsh.Point.Channel.Block.Events)
    MergeFrom(*source);
  }
}

void Point_Channel_Block_Events::MergeFrom(const Point_Channel_Block_Events& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rsh.Point.Channel.Block.Events)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  times_.MergeFrom(from.times_);
  amplitudes_.MergeFrom(from.amplitudes_);
}

void Point_Channel_Block_Events::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rsh.Point.Channel.Block.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Channel_Block_Events::CopyFrom(const Point_Channel_Block_Events& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rsh.Point.Channel.Block.Events)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Channel_Block_Events::IsInitialized() const {
  return true;
}

void Point_Channel_Block_Events::InternalSwap(Point_Channel_Block_Events* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  times_.InternalSwap(&other->times_);
  amplitudes_.InternalSwap(&other->amplitudes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Channel_Block_Events::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point_Channel_Block::InitAsDefaultInstance() {
  ::Rsh::_Point_Channel_Block_default_instance_._instance.get_mutable()->events_ = const_cast< ::Rsh::Point_Channel_Block_Events*>(
      ::Rsh::Point_Channel_Block_Events::internal_default_instance());
}
class Point_Channel_Block::_Internal {
 public:
  static const ::Rsh::Point_Channel_Block_Events& events(const Point_Channel_Block* msg);
};

const ::Rsh::Point_Channel_Block_Events&
Point_Channel_Block::_Internal::events(const Point_Channel_Block* msg) {
  return *msg->events_;
}
Point_Channel_Block::Point_Channel_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  frames_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rsh.Point.Channel.Block)
}
Point_Channel_Block::Point_Channel_Block(const Point_Channel_Block& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      frames_(from.frames_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_events()) {
    events_ = new ::Rsh::Point_Channel_Block_Events(*from.events_);
  } else {
    events_ = nullptr;
  }
  ::memcpy(&time_, &from.time_,
    static_cast<size_t>(reinterpret_cast<char*>(&bin_size_) -
    reinterpret_cast<char*>(&time_)) + sizeof(bin_size_));
  // @@protoc_insertion_point(copy_constructor:Rsh.Point.Channel.Block)
}

void Point_Channel_Block::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_Channel_Block_rsb_5fevent_2eproto.base);
  ::memset(&events_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_size_) -
      reinterpret_cast<char*>(&events_)) + sizeof(bin_size_));
}

Point_Channel_Block::~Point_Channel_Block() {
  // @@protoc_insertion_point(destructor:Rsh.Point.Channel.Block)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Channel_Block::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete events_;
}

void Point_Channel_Block::ArenaDtor(void* object) {
  Point_Channel_Block* _this = reinterpret_cast< Point_Channel_Block* >(object);
  (void)_this;
}
void Point_Channel_Block::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Channel_Block::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Channel_Block& Point_Channel_Block::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Channel_Block_rsb_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Point_Channel_Block::Clear() {
// @@protoc_insertion_point(message_clear_start:Rsh.Point.Channel.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frames_.Clear();
  if (GetArena() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
  ::memset(&time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&bin_size_) -
      reinterpret_cast<char*>(&time_)) + sizeof(bin_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Channel_Block::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rsh.Point.Channel.Block.Frame frames = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_frames(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // .Rsh.Point.Channel.Block.Events events = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_events(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint64 bin_size = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          bin_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Channel_Block::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rsh.Point.Channel.Block)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 time = 1;
  if (this->time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_time(), target);
  }

  // repeated .Rsh.Point.Channel.Block.Frame frames = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_frames_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_frames(i), target, stream);
  }

  // .Rsh.Point.Channel.Block.Events events = 3;
  if (this->has_events()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::events(this), target, stream);
  }

  // uint64 length = 4;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_length(), target);
  }

  // uint64 bin_size = 5;
  if (this->bin_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_bin_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rsh.Point.Channel.Block)
  return target;
}

size_t Point_Channel_Block::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rsh.Point.Channel.Block)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rsh.Point.Channel.Block.Frame frames = 2;
  total_size += 1UL * this->_internal_frames_size();
  for (const auto& msg : this->frames_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .Rsh.Point.Channel.Block.Events events = 3;
  if (this->has_events()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *events_);
  }

  // uint64 time = 1;
  if (this->time() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_time());
  }

  // uint64 length = 4;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_length());
  }

  // uint64 bin_size = 5;
  if (this->bin_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_bin_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Channel_Block::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rsh.Point.Channel.Block)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Channel_Block* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Channel_Block>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rsh.Point.Channel.Block)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rsh.Point.Channel.Block)
    MergeFrom(*source);
  }
}

void Point_Channel_Block::MergeFrom(const Point_Channel_Block& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rsh.Point.Channel.Block)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  frames_.MergeFrom(from.frames_);
  if (from.has_events()) {
    _internal_mutable_events()->::Rsh::Point_Channel_Block_Events::MergeFrom(from._internal_events());
  }
  if (from.time() != 0) {
    _internal_set_time(from._internal_time());
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.bin_size() != 0) {
    _internal_set_bin_size(from._internal_bin_size());
  }
}

void Point_Channel_Block::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rsh.Point.Channel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Channel_Block::CopyFrom(const Point_Channel_Block& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rsh.Point.Channel.Block)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Channel_Block::IsInitialized() const {
  return true;
}

void Point_Channel_Block::InternalSwap(Point_Channel_Block* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  frames_.InternalSwap(&other->frames_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point_Channel_Block, bin_size_)
      + sizeof(Point_Channel_Block::bin_size_)
      - PROTOBUF_FIELD_OFFSET(Point_Channel_Block, events_)>(
          reinterpret_cast<char*>(&events_),
          reinterpret_cast<char*>(&other->events_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Channel_Block::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point_Channel::InitAsDefaultInstance() {
}
class Point_Channel::_Internal {
 public:
};

Point_Channel::Point_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rsh.Point.Channel)
}
Point_Channel::Point_Channel(const Point_Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      blocks_(from.blocks_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:Rsh.Point.Channel)
}

void Point_Channel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_Channel_rsb_5fevent_2eproto.base);
  id_ = PROTOBUF_ULONGLONG(0);
}

Point_Channel::~Point_Channel() {
  // @@protoc_insertion_point(destructor:Rsh.Point.Channel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point_Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point_Channel::ArenaDtor(void* object) {
  Point_Channel* _this = reinterpret_cast< Point_Channel* >(object);
  (void)_this;
}
void Point_Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point_Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point_Channel& Point_Channel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_Channel_rsb_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Point_Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:Rsh.Point.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  id_ = PROTOBUF_ULONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point_Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .Rsh.Point.Channel.Block blocks = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point_Channel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rsh.Point.Channel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // repeated .Rsh.Point.Channel.Block blocks = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_blocks(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rsh.Point.Channel)
  return target;
}

size_t Point_Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rsh.Point.Channel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rsh.Point.Channel.Block blocks = 2;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point_Channel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rsh.Point.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  const Point_Channel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point_Channel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rsh.Point.Channel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rsh.Point.Channel)
    MergeFrom(*source);
  }
}

void Point_Channel::MergeFrom(const Point_Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rsh.Point.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  if (from.id() != 0) {
    _internal_set_id(from._internal_id());
  }
}

void Point_Channel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rsh.Point.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point_Channel::CopyFrom(const Point_Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rsh.Point.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point_Channel::IsInitialized() const {
  return true;
}

void Point_Channel::InternalSwap(Point_Channel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  blocks_.InternalSwap(&other->blocks_);
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point_Channel::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Point::InitAsDefaultInstance() {
}
class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Rsh.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Rsh.Point)
}

void Point::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Point_rsb_5fevent_2eproto.base);
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:Rsh.Point)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Point& Point::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Point_rsb_5fevent_2eproto.base);
  return *internal_default_instance();
}


void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:Rsh.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .Rsh.Point.Channel channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Point::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Rsh.Point)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Rsh.Point.Channel channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Rsh.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Rsh.Point)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Rsh.Point.Channel channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Point::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Rsh.Point)
  GOOGLE_DCHECK_NE(&from, this);
  const Point* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Point>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Rsh.Point)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Rsh.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Rsh.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
}

void Point::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Rsh.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Rsh.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace Rsh
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Rsh::Point_Channel_Block_Frame* Arena::CreateMaybeMessage< ::Rsh::Point_Channel_Block_Frame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rsh::Point_Channel_Block_Frame >(arena);
}
template<> PROTOBUF_NOINLINE ::Rsh::Point_Channel_Block_Events* Arena::CreateMaybeMessage< ::Rsh::Point_Channel_Block_Events >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rsh::Point_Channel_Block_Events >(arena);
}
template<> PROTOBUF_NOINLINE ::Rsh::Point_Channel_Block* Arena::CreateMaybeMessage< ::Rsh::Point_Channel_Block >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rsh::Point_Channel_Block >(arena);
}
template<> PROTOBUF_NOINLINE ::Rsh::Point_Channel* Arena::CreateMaybeMessage< ::Rsh::Point_Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rsh::Point_Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::Rsh::Point* Arena::CreateMaybeMessage< ::Rsh::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Rsh::Point >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
