// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: rsb_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_rsb_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_rsb_5fevent_2eproto

#include <limits>
#include <string>
#include <byteswap.h>

#ifndef bswap_16
#define bswap_16(x) __builtin_bswap16(x)
#endif
#ifndef bswap_32
#define bswap_32(x) __builtin_bswap32(x)
#endif
#ifndef bswap_64
#define bswap_64(x) __builtin_bswap64(x)
#endif

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_rsb_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_rsb_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_rsb_5fevent_2eproto;
namespace Rsh {
class Point;
class PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Point_Channel;
class Point_ChannelDefaultTypeInternal;
extern Point_ChannelDefaultTypeInternal _Point_Channel_default_instance_;
class Point_Channel_Block;
class Point_Channel_BlockDefaultTypeInternal;
extern Point_Channel_BlockDefaultTypeInternal _Point_Channel_Block_default_instance_;
class Point_Channel_Block_Events;
class Point_Channel_Block_EventsDefaultTypeInternal;
extern Point_Channel_Block_EventsDefaultTypeInternal _Point_Channel_Block_Events_default_instance_;
class Point_Channel_Block_Frame;
class Point_Channel_Block_FrameDefaultTypeInternal;
extern Point_Channel_Block_FrameDefaultTypeInternal _Point_Channel_Block_Frame_default_instance_;
}  // namespace Rsh
PROTOBUF_NAMESPACE_OPEN
template<> ::Rsh::Point* Arena::CreateMaybeMessage<::Rsh::Point>(Arena*);
template<> ::Rsh::Point_Channel* Arena::CreateMaybeMessage<::Rsh::Point_Channel>(Arena*);
template<> ::Rsh::Point_Channel_Block* Arena::CreateMaybeMessage<::Rsh::Point_Channel_Block>(Arena*);
template<> ::Rsh::Point_Channel_Block_Events* Arena::CreateMaybeMessage<::Rsh::Point_Channel_Block_Events>(Arena*);
template<> ::Rsh::Point_Channel_Block_Frame* Arena::CreateMaybeMessage<::Rsh::Point_Channel_Block_Frame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Rsh {

// ===================================================================

class Point_Channel_Block_Frame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rsh.Point.Channel.Block.Frame) */ {
 public:
  inline Point_Channel_Block_Frame() : Point_Channel_Block_Frame(nullptr) {};
  virtual ~Point_Channel_Block_Frame();

  Point_Channel_Block_Frame(const Point_Channel_Block_Frame& from);
  Point_Channel_Block_Frame(Point_Channel_Block_Frame&& from) noexcept
    : Point_Channel_Block_Frame() {
    *this = ::std::move(from);
  }

  inline Point_Channel_Block_Frame& operator=(const Point_Channel_Block_Frame& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Channel_Block_Frame& operator=(Point_Channel_Block_Frame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point_Channel_Block_Frame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point_Channel_Block_Frame* internal_default_instance() {
    return reinterpret_cast<const Point_Channel_Block_Frame*>(
               &_Point_Channel_Block_Frame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point_Channel_Block_Frame& a, Point_Channel_Block_Frame& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Channel_Block_Frame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Channel_Block_Frame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Channel_Block_Frame* New() const final {
    return CreateMaybeMessage<Point_Channel_Block_Frame>(nullptr);
  }

  Point_Channel_Block_Frame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Channel_Block_Frame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Channel_Block_Frame& from);
  void MergeFrom(const Point_Channel_Block_Frame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Channel_Block_Frame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rsh.Point.Channel.Block.Frame";
  }
  protected:
  explicit Point_Channel_Block_Frame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsb_5fevent_2eproto);
    return ::descriptor_table_rsb_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kTimeFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_data();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_data(
      std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Rsh.Point.Channel.Block.Frame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsb_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Point_Channel_Block_Events PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rsh.Point.Channel.Block.Events) */ {
 public:
  inline Point_Channel_Block_Events() : Point_Channel_Block_Events(nullptr) {};
  virtual ~Point_Channel_Block_Events();

  Point_Channel_Block_Events(const Point_Channel_Block_Events& from);
  Point_Channel_Block_Events(Point_Channel_Block_Events&& from) noexcept
    : Point_Channel_Block_Events() {
    *this = ::std::move(from);
  }

  inline Point_Channel_Block_Events& operator=(const Point_Channel_Block_Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Channel_Block_Events& operator=(Point_Channel_Block_Events&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point_Channel_Block_Events& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point_Channel_Block_Events* internal_default_instance() {
    return reinterpret_cast<const Point_Channel_Block_Events*>(
               &_Point_Channel_Block_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Point_Channel_Block_Events& a, Point_Channel_Block_Events& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Channel_Block_Events* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Channel_Block_Events* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Channel_Block_Events* New() const final {
    return CreateMaybeMessage<Point_Channel_Block_Events>(nullptr);
  }

  Point_Channel_Block_Events* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Channel_Block_Events>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Channel_Block_Events& from);
  void MergeFrom(const Point_Channel_Block_Events& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Channel_Block_Events* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rsh.Point.Channel.Block.Events";
  }
  protected:
  explicit Point_Channel_Block_Events(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsb_5fevent_2eproto);
    return ::descriptor_table_rsb_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimesFieldNumber = 1,
    kAmplitudesFieldNumber = 2,
  };
  // repeated uint64 times = 1;
  int times_size() const;
  private:
  int _internal_times_size() const;
  public:
  void clear_times();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_times(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_times() const;
  void _internal_add_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_times();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 times(int index) const;
  void set_times(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_times(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      times() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_times();

  // repeated uint64 amplitudes = 2;
  int amplitudes_size() const;
  private:
  int _internal_amplitudes_size() const;
  public:
  void clear_amplitudes();
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_amplitudes(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      _internal_amplitudes() const;
  void _internal_add_amplitudes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      _internal_mutable_amplitudes();
  public:
  ::PROTOBUF_NAMESPACE_ID::uint64 amplitudes(int index) const;
  void set_amplitudes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_amplitudes(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      amplitudes() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_amplitudes();

  // @@protoc_insertion_point(class_scope:Rsh.Point.Channel.Block.Events)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > times_;
  mutable std::atomic<int> _times_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > amplitudes_;
  mutable std::atomic<int> _amplitudes_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsb_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Point_Channel_Block PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rsh.Point.Channel.Block) */ {
 public:
  inline Point_Channel_Block() : Point_Channel_Block(nullptr) {};
  virtual ~Point_Channel_Block();

  Point_Channel_Block(const Point_Channel_Block& from);
  Point_Channel_Block(Point_Channel_Block&& from) noexcept
    : Point_Channel_Block() {
    *this = ::std::move(from);
  }

  inline Point_Channel_Block& operator=(const Point_Channel_Block& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Channel_Block& operator=(Point_Channel_Block&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point_Channel_Block& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point_Channel_Block* internal_default_instance() {
    return reinterpret_cast<const Point_Channel_Block*>(
               &_Point_Channel_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Point_Channel_Block& a, Point_Channel_Block& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Channel_Block* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Channel_Block* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Channel_Block* New() const final {
    return CreateMaybeMessage<Point_Channel_Block>(nullptr);
  }

  Point_Channel_Block* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Channel_Block>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Channel_Block& from);
  void MergeFrom(const Point_Channel_Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Channel_Block* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rsh.Point.Channel.Block";
  }
  protected:
  explicit Point_Channel_Block(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsb_5fevent_2eproto);
    return ::descriptor_table_rsb_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Point_Channel_Block_Frame Frame;
  typedef Point_Channel_Block_Events Events;

  // accessors -------------------------------------------------------

  enum : int {
    kFramesFieldNumber = 2,
    kEventsFieldNumber = 3,
    kTimeFieldNumber = 1,
    kLengthFieldNumber = 4,
    kBinSizeFieldNumber = 5,
  };
  // repeated .Rsh.Point.Channel.Block.Frame frames = 2;
  int frames_size() const;
  private:
  int _internal_frames_size() const;
  public:
  void clear_frames();
  ::Rsh::Point_Channel_Block_Frame* mutable_frames(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block_Frame >*
      mutable_frames();
  private:
  const ::Rsh::Point_Channel_Block_Frame& _internal_frames(int index) const;
  ::Rsh::Point_Channel_Block_Frame* _internal_add_frames();
  public:
  const ::Rsh::Point_Channel_Block_Frame& frames(int index) const;
  ::Rsh::Point_Channel_Block_Frame* add_frames();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block_Frame >&
      frames() const;

  // .Rsh.Point.Channel.Block.Events events = 3;
  bool has_events() const;
  private:
  bool _internal_has_events() const;
  public:
  void clear_events();
  const ::Rsh::Point_Channel_Block_Events& events() const;
  ::Rsh::Point_Channel_Block_Events* release_events();
  ::Rsh::Point_Channel_Block_Events* mutable_events();
  void set_allocated_events(::Rsh::Point_Channel_Block_Events* events);
  private:
  const ::Rsh::Point_Channel_Block_Events& _internal_events() const;
  ::Rsh::Point_Channel_Block_Events* _internal_mutable_events();
  public:
  void unsafe_arena_set_allocated_events(
      ::Rsh::Point_Channel_Block_Events* events);
  ::Rsh::Point_Channel_Block_Events* unsafe_arena_release_events();

  // uint64 time = 1;
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::uint64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 length = 4;
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::uint64 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // uint64 bin_size = 5;
  void clear_bin_size();
  ::PROTOBUF_NAMESPACE_ID::uint64 bin_size() const;
  void set_bin_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_bin_size() const;
  void _internal_set_bin_size(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Rsh.Point.Channel.Block)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block_Frame > frames_;
  ::Rsh::Point_Channel_Block_Events* events_;
  ::PROTOBUF_NAMESPACE_ID::uint64 time_;
  ::PROTOBUF_NAMESPACE_ID::uint64 length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 bin_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsb_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Point_Channel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rsh.Point.Channel) */ {
 public:
  inline Point_Channel() : Point_Channel(nullptr) {};
  virtual ~Point_Channel();

  Point_Channel(const Point_Channel& from);
  Point_Channel(Point_Channel&& from) noexcept
    : Point_Channel() {
    *this = ::std::move(from);
  }

  inline Point_Channel& operator=(const Point_Channel& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point_Channel& operator=(Point_Channel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point_Channel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point_Channel* internal_default_instance() {
    return reinterpret_cast<const Point_Channel*>(
               &_Point_Channel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Point_Channel& a, Point_Channel& b) {
    a.Swap(&b);
  }
  inline void Swap(Point_Channel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point_Channel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point_Channel* New() const final {
    return CreateMaybeMessage<Point_Channel>(nullptr);
  }

  Point_Channel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point_Channel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point_Channel& from);
  void MergeFrom(const Point_Channel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point_Channel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rsh.Point.Channel";
  }
  protected:
  explicit Point_Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsb_5fevent_2eproto);
    return ::descriptor_table_rsb_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Point_Channel_Block Block;

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .Rsh.Point.Channel.Block blocks = 2;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::Rsh::Point_Channel_Block* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block >*
      mutable_blocks();
  private:
  const ::Rsh::Point_Channel_Block& _internal_blocks(int index) const;
  ::Rsh::Point_Channel_Block* _internal_add_blocks();
  public:
  const ::Rsh::Point_Channel_Block& blocks(int index) const;
  ::Rsh::Point_Channel_Block* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block >&
      blocks() const;

  // uint64 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:Rsh.Point.Channel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block > blocks_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsb_5fevent_2eproto;
};
// -------------------------------------------------------------------

class Point PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Rsh.Point) */ {
 public:
  inline Point() : Point(nullptr) {};
  virtual ~Point();

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Point& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Point* New() const final {
    return CreateMaybeMessage<Point>(nullptr);
  }

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Point& from);
  void MergeFrom(const Point& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Rsh.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_rsb_5fevent_2eproto);
    return ::descriptor_table_rsb_5fevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Point_Channel Channel;

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
  };
  // repeated .Rsh.Point.Channel channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::Rsh::Point_Channel* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel >*
      mutable_channels();
  private:
  const ::Rsh::Point_Channel& _internal_channels(int index) const;
  ::Rsh::Point_Channel* _internal_add_channels();
  public:
  const ::Rsh::Point_Channel& channels(int index) const;
  ::Rsh::Point_Channel* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel >&
      channels() const;

  // @@protoc_insertion_point(class_scope:Rsh.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel > channels_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_rsb_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point_Channel_Block_Frame

// uint64 time = 1;
inline void Point_Channel_Block_Frame::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Frame::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Frame::time() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.Frame.time)
  return _internal_time();
}
inline void Point_Channel_Block_Frame::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void Point_Channel_Block_Frame::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.Frame.time)
}

// bytes data = 2;
inline void Point_Channel_Block_Frame::clear_data() {
  data_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Point_Channel_Block_Frame::data() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.Frame.data)
  return _internal_data();
}
inline void Point_Channel_Block_Frame::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.Frame.data)
}
inline std::string* Point_Channel_Block_Frame::mutable_data() {
  // @@protoc_insertion_point(field_mutable:Rsh.Point.Channel.Block.Frame.data)
  return _internal_mutable_data();
}
inline const std::string& Point_Channel_Block_Frame::_internal_data() const {
  return data_.Get();
}
inline void Point_Channel_Block_Frame::_internal_set_data(const std::string& value) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Point_Channel_Block_Frame::set_data(std::string&& value) {
  
  data_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Rsh.Point.Channel.Block.Frame.data)
}
inline void Point_Channel_Block_Frame::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Rsh.Point.Channel.Block.Frame.data)
}
inline void Point_Channel_Block_Frame::set_data(const void* value,
    size_t size) {
  
  data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Rsh.Point.Channel.Block.Frame.data)
}
inline std::string* Point_Channel_Block_Frame::_internal_mutable_data() {
  
  return data_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Point_Channel_Block_Frame::release_data() {
  // @@protoc_insertion_point(field_release:Rsh.Point.Channel.Block.Frame.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Point_Channel_Block_Frame::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Rsh.Point.Channel.Block.Frame.data)
}
inline std::string* Point_Channel_Block_Frame::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Rsh.Point.Channel.Block.Frame.data)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return data_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Point_Channel_Block_Frame::unsafe_arena_set_allocated_data(
    std::string* data) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (data != nullptr) {
    
  } else {
    
  }
  data_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      data, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rsh.Point.Channel.Block.Frame.data)
}

// -------------------------------------------------------------------

// Point_Channel_Block_Events

// repeated uint64 times = 1;
inline int Point_Channel_Block_Events::_internal_times_size() const {
  return times_.size();
}
inline int Point_Channel_Block_Events::times_size() const {
  return _internal_times_size();
}
inline void Point_Channel_Block_Events::clear_times() {
  times_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Events::_internal_times(int index) const {
  return times_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Events::times(int index) const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.Events.times)
  return _internal_times(index);
}
inline void Point_Channel_Block_Events::set_times(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  times_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.Events.times)
}
inline void Point_Channel_Block_Events::_internal_add_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  times_.Add(value);
}
inline void Point_Channel_Block_Events::add_times(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_times(value);
  // @@protoc_insertion_point(field_add:Rsh.Point.Channel.Block.Events.times)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Point_Channel_Block_Events::_internal_times() const {
  return times_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Point_Channel_Block_Events::times() const {
  // @@protoc_insertion_point(field_list:Rsh.Point.Channel.Block.Events.times)
  return _internal_times();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Point_Channel_Block_Events::_internal_mutable_times() {
  return &times_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Point_Channel_Block_Events::mutable_times() {
  // @@protoc_insertion_point(field_mutable_list:Rsh.Point.Channel.Block.Events.times)
  return _internal_mutable_times();
}

// repeated uint64 amplitudes = 2;
inline int Point_Channel_Block_Events::_internal_amplitudes_size() const {
  return amplitudes_.size();
}
inline int Point_Channel_Block_Events::amplitudes_size() const {
  return _internal_amplitudes_size();
}
inline void Point_Channel_Block_Events::clear_amplitudes() {
  amplitudes_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Events::_internal_amplitudes(int index) const {
  return amplitudes_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block_Events::amplitudes(int index) const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.Events.amplitudes)
  return _internal_amplitudes(index);
}
inline void Point_Channel_Block_Events::set_amplitudes(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  amplitudes_.Set(index, value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.Events.amplitudes)
}
inline void Point_Channel_Block_Events::_internal_add_amplitudes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  amplitudes_.Add(value);
}
inline void Point_Channel_Block_Events::add_amplitudes(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_add_amplitudes(value);
  // @@protoc_insertion_point(field_add:Rsh.Point.Channel.Block.Events.amplitudes)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Point_Channel_Block_Events::_internal_amplitudes() const {
  return amplitudes_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
Point_Channel_Block_Events::amplitudes() const {
  // @@protoc_insertion_point(field_list:Rsh.Point.Channel.Block.Events.amplitudes)
  return _internal_amplitudes();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Point_Channel_Block_Events::_internal_mutable_amplitudes() {
  return &amplitudes_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
Point_Channel_Block_Events::mutable_amplitudes() {
  // @@protoc_insertion_point(field_mutable_list:Rsh.Point.Channel.Block.Events.amplitudes)
  return _internal_mutable_amplitudes();
}

// -------------------------------------------------------------------

// Point_Channel_Block

// uint64 time = 1;
inline void Point_Channel_Block::clear_time() {
  time_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::time() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.time)
  return _internal_time();
}
inline void Point_Channel_Block::_internal_set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  time_ = value;
}
inline void Point_Channel_Block::set_time(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.time)
}

// repeated .Rsh.Point.Channel.Block.Frame frames = 2;
inline int Point_Channel_Block::_internal_frames_size() const {
  return frames_.size();
}
inline int Point_Channel_Block::frames_size() const {
  return _internal_frames_size();
}
inline void Point_Channel_Block::clear_frames() {
  frames_.Clear();
}
inline ::Rsh::Point_Channel_Block_Frame* Point_Channel_Block::mutable_frames(int index) {
  // @@protoc_insertion_point(field_mutable:Rsh.Point.Channel.Block.frames)
  return frames_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block_Frame >*
Point_Channel_Block::mutable_frames() {
  // @@protoc_insertion_point(field_mutable_list:Rsh.Point.Channel.Block.frames)
  return &frames_;
}
inline const ::Rsh::Point_Channel_Block_Frame& Point_Channel_Block::_internal_frames(int index) const {
  return frames_.Get(index);
}
inline const ::Rsh::Point_Channel_Block_Frame& Point_Channel_Block::frames(int index) const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.frames)
  return _internal_frames(index);
}
inline ::Rsh::Point_Channel_Block_Frame* Point_Channel_Block::_internal_add_frames() {
  return frames_.Add();
}
inline ::Rsh::Point_Channel_Block_Frame* Point_Channel_Block::add_frames() {
  // @@protoc_insertion_point(field_add:Rsh.Point.Channel.Block.frames)
  return _internal_add_frames();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block_Frame >&
Point_Channel_Block::frames() const {
  // @@protoc_insertion_point(field_list:Rsh.Point.Channel.Block.frames)
  return frames_;
}

// .Rsh.Point.Channel.Block.Events events = 3;
inline bool Point_Channel_Block::_internal_has_events() const {
  return this != internal_default_instance() && events_ != nullptr;
}
inline bool Point_Channel_Block::has_events() const {
  return _internal_has_events();
}
inline void Point_Channel_Block::clear_events() {
  if (GetArena() == nullptr && events_ != nullptr) {
    delete events_;
  }
  events_ = nullptr;
}
inline const ::Rsh::Point_Channel_Block_Events& Point_Channel_Block::_internal_events() const {
  const ::Rsh::Point_Channel_Block_Events* p = events_;
  return p != nullptr ? *p : *reinterpret_cast<const ::Rsh::Point_Channel_Block_Events*>(
      &::Rsh::_Point_Channel_Block_Events_default_instance_);
}
inline const ::Rsh::Point_Channel_Block_Events& Point_Channel_Block::events() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.events)
  return _internal_events();
}
inline void Point_Channel_Block::unsafe_arena_set_allocated_events(
    ::Rsh::Point_Channel_Block_Events* events) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(events_);
  }
  events_ = events;
  if (events) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Rsh.Point.Channel.Block.events)
}
inline ::Rsh::Point_Channel_Block_Events* Point_Channel_Block::release_events() {
  auto temp = unsafe_arena_release_events();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Rsh::Point_Channel_Block_Events* Point_Channel_Block::unsafe_arena_release_events() {
  // @@protoc_insertion_point(field_release:Rsh.Point.Channel.Block.events)
  
  ::Rsh::Point_Channel_Block_Events* temp = events_;
  events_ = nullptr;
  return temp;
}
inline ::Rsh::Point_Channel_Block_Events* Point_Channel_Block::_internal_mutable_events() {
  
  if (events_ == nullptr) {
    auto* p = CreateMaybeMessage<::Rsh::Point_Channel_Block_Events>(GetArena());
    events_ = p;
  }
  return events_;
}
inline ::Rsh::Point_Channel_Block_Events* Point_Channel_Block::mutable_events() {
  // @@protoc_insertion_point(field_mutable:Rsh.Point.Channel.Block.events)
  return _internal_mutable_events();
}
inline void Point_Channel_Block::set_allocated_events(::Rsh::Point_Channel_Block_Events* events) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete events_;
  }
  if (events) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(events);
    if (message_arena != submessage_arena) {
      events = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, events, submessage_arena);
    }
    
  } else {
    
  }
  events_ = events;
  // @@protoc_insertion_point(field_set_allocated:Rsh.Point.Channel.Block.events)
}

// uint64 length = 4;
inline void Point_Channel_Block::clear_length() {
  length_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::length() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.length)
  return _internal_length();
}
inline void Point_Channel_Block::_internal_set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  length_ = value;
}
inline void Point_Channel_Block::set_length(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.length)
}

// uint64 bin_size = 5;
inline void Point_Channel_Block::clear_bin_size() {
  bin_size_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::_internal_bin_size() const {
  return bin_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel_Block::bin_size() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.Block.bin_size)
  return _internal_bin_size();
}
inline void Point_Channel_Block::_internal_set_bin_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  bin_size_ = value;
}
inline void Point_Channel_Block::set_bin_size(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_bin_size(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.Block.bin_size)
}

// -------------------------------------------------------------------

// Point_Channel

// uint64 id = 1;
inline void Point_Channel::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 Point_Channel::id() const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.id)
  return _internal_id();
}
inline void Point_Channel::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  id_ = value;
}
inline void Point_Channel::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:Rsh.Point.Channel.id)
}

// repeated .Rsh.Point.Channel.Block blocks = 2;
inline int Point_Channel::_internal_blocks_size() const {
  return blocks_.size();
}
inline int Point_Channel::blocks_size() const {
  return _internal_blocks_size();
}
inline void Point_Channel::clear_blocks() {
  blocks_.Clear();
}
inline ::Rsh::Point_Channel_Block* Point_Channel::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:Rsh.Point.Channel.blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block >*
Point_Channel::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:Rsh.Point.Channel.blocks)
  return &blocks_;
}
inline const ::Rsh::Point_Channel_Block& Point_Channel::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::Rsh::Point_Channel_Block& Point_Channel::blocks(int index) const {
  // @@protoc_insertion_point(field_get:Rsh.Point.Channel.blocks)
  return _internal_blocks(index);
}
inline ::Rsh::Point_Channel_Block* Point_Channel::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::Rsh::Point_Channel_Block* Point_Channel::add_blocks() {
  // @@protoc_insertion_point(field_add:Rsh.Point.Channel.blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel_Block >&
Point_Channel::blocks() const {
  // @@protoc_insertion_point(field_list:Rsh.Point.Channel.blocks)
  return blocks_;
}

// -------------------------------------------------------------------

// Point

// repeated .Rsh.Point.Channel channels = 1;
inline int Point::_internal_channels_size() const {
  return channels_.size();
}
inline int Point::channels_size() const {
  return _internal_channels_size();
}
inline void Point::clear_channels() {
  channels_.Clear();
}
inline ::Rsh::Point_Channel* Point::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:Rsh.Point.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel >*
Point::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:Rsh.Point.channels)
  return &channels_;
}
inline const ::Rsh::Point_Channel& Point::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::Rsh::Point_Channel& Point::channels(int index) const {
  // @@protoc_insertion_point(field_get:Rsh.Point.channels)
  return _internal_channels(index);
}
inline ::Rsh::Point_Channel* Point::_internal_add_channels() {
  return channels_.Add();
}
inline ::Rsh::Point_Channel* Point::add_channels() {
  // @@protoc_insertion_point(field_add:Rsh.Point.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Rsh::Point_Channel >&
Point::channels() const {
  // @@protoc_insertion_point(field_list:Rsh.Point.channels)
  return channels_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Rsh

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_rsb_5fevent_2eproto
